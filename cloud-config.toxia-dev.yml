#cloud-config
hostname: toxlab
ssh_authorized_keys:
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDTJT2ZKz2CcWVnMOUf7XL4dmLG+MQgb8bMEKMj+oATu0yq9EJQ/8bM1pzFmyeg6F45K0yWp2VyZhTUThc5L3cyV0IPRxUqU0+4fDDHIo9dQ5zE5Fkp13jPXBx+M7wjEMRBhd9oMwY0GhxaDWwR8ikXf7Jjp9HTlbira4HBdDvJcQ== doma"
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCw5uXH2xeCafMdzd4IUq6YSplkmbgHQxcn3SwTVfpPFcbKleITQxS5zd6TZEFkczhDxbPiS+evZOtFYARCw6JkHpwkZ7kGCx8taJaF4tVBe0laadYhZkZYiKiX1qVnmoPXvY8RDk9CLqBga/crenN7jPyhmR0yaKRt3cJjQly+q3eZ0QFvrfz9gn+826FjT1+VM/QBObYFj4wYwH8JOF933AyYydXj0izIEr/DXDaDFd5PjpzuT+X3GSVaGtcQDhQePJNUm+lb8Hx4EXH+jJy+ta+aOxW6nyEqgVoPQwkEkRBPSy65WvtrDPzKUmnLn/cLqHj/1P48UW7PftrBt66b pista@AqualtisPro.local"
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDbezz7qNl39nMSNynzJtiqmMiTODGqCE89rye0gucitGDaHlmykP5VOmjTl00p8p9p0k/Se6yPeGKcdRJGn/Cn5TU+TO2D7+LRTD+woyiB4A1+OmEhL/gXyM6a8LFAw2TO8G5lX3NDss/xmZ9iI2Wd7ZAV+dic4IeF5oE+UPouMQ== delo"

write_files:
  - path: /usr/local/bin/brctl
    permissions: "0755"
    owner: "root"
    content: |
      docker run --rm -ti --privileged --cap-add=NET_ADMIN --net=host alpine:3.2 brctl $@

  - path: /etc/rc.local
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      BINDIR="/usr/local/bin"
      STORE="https://raw.githubusercontent.com/dserfez/tox-lab-net/master"
      FILES="remote_dev-bgp.sh remote_dev-mgr.sh remote_dev-filter.sh start_dev-bgp.sh start_dev-mgr.sh start_dev-filter.sh"
      get_file() {
        wget -O "${BINDIR}/${FILE}" "${STORE}/${FILE}"
        chmod +x "${BINDIR}/${FILE}"
      }
      [ -d "${BINDIR}" ] || sudo mkdir -p "${BINDIR}"
      for FILE in $FILES ; do
        [ -x "${BINDIR}/${FILE}" ] || get_file
      done
      ln -s /usr/local/bin/start_dev-mgr.sh /usr/local/bin/m
      ln -s /usr/local/bin/start_dev-bgp.sh /usr/local/bin/b
      ln -s /usr/local/bin/start_dev-filter.sh /usr/local/bin/f

  - path: /usr/local/bin/start_tox.sh
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash
      #
      # Launch toxia containers
      #
      : ${DEV_ROOT:=/home/jaco/dev}

      : ${NFS_ROOT:=192.168.56.1}
      /usr/local/bin/start_dev-mgr.sh
      /usr/local/bin/start_dev-filter.sh
      /usr/local/bin/start_dev-bgp.sh

  - path: /usr/local/bin/tools
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash

      docker run --rm -ti --name tools --privileged --net=host -v /:/opt/root cycomf/labtools /bin/sh

  - path: /usr/local/bin/import_cloud-config_toxdev.sh
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash
      # import_cloud-config_toxdev.sh

      sudo ros config import -i cloud-config.yml

#  - path: /etc/iproute/rt_tables
#    permissions: "0755"
#    owner: root
#    content: |
#      #
#      # reserved values
#      #
#      255	local
#      254	main
#      253	default
#      0	unspec
#      #
#      # local
#      #
#      #1	inr.ruhep
#      100 dplane

#  - path: /usr/local/bin/start_lab.sh
#    permissions: "0755"
#    owner: root
#    content: |
#      #!/bin/bash
#      #
#      # Launch network of routers
#      #
#
#      ### Config section
#      # Subscribers interface
#      : ${SUBS_IFACE:=subs}
#      # Toxia facing interface
#      : ${TOXIA_IFACE:=toxnet}
#      # Public/Internet facing interface
#      #PUBLIC_IFACE="$(ip r | grep ^default | awk '{print $5}')"
#      PUBLIC_IFACE="docker0"
#
#      # IP for the public facing interface
#      PUBLIC_IP="172.17.42.10/24"
#
#      # IP for the interface facing toxia
#      TOXIA_IP="192.168.8.8/24"
#      #TOXIA_IP="0.0.0.0/0"
#
#      # IP for the interface facing subscribers
#      SUBS_IP="192.168.9.9/24"
#      #SUBS_IP="0.0.0.0/0"
#
#      ### END of Config section
#
#      ROUTER_NAMES="subs_pe isp_peering pr dc_pe"
#
#      BRIDGES="p-dcpe p-isp p-subspe toxnet subs"
#
#      #DOCKER_IP="172.17.42.1"
#      DOCKER_IP=$(ip -o -f inet a s dev docker0 | awk '{print $4}' | cut -d"/" -f1)
#      FEATURE="-d"
#
#      workdir="$(cd $( dirname $( readlink -f con $0) ) && pwd)"
#
#      if [ ! -d /usr/local/bin ] ; then
#        sudo mkdir -p /usr/local/bin
#      fi
#
#      if [ ! -x /usr/local/bin/pipework ] ; then
#        sudo wget -O /usr/local/bin/pipework https://raw.githubusercontent.com/jpetazzo/pipework/master/pipework
#        sudo chmod +x /usr/local/bin/pipework
#      fi
#
#      #pipework="sudo $workdir/pipework --wait"
#      pipework="sudo pipework"
#
#      # If router config files don't exist, create them
#      # (otherwise the router process wouldn't start)
#      for DIR in $ROUTER_NAMES ; do
#        DIRNAME="/opt/lab/${DIR}_conf"
#        [ -d ${DIRNAME} ] || sudo mkdir -p ${DIRNAME}
#        #[ -e ${DIRNAME}/bgpd.conf ] || sudo touch ${DIRNAME}/bgpd.conf
#        #[ -e ${DIRNAME}/zebra.conf ] || sudo touch ${DIRNAME}/zebra.conf
#        [ -e ${DIRNAME}/bgpd.conf ] || sudo wget -O ${DIRNAME}/bgpd.conf https://raw.githubusercontent.com/dserfez/tox-lab-net/master/${DIR}_conf/bgpd.conf
#        [ -e ${DIRNAME}/bgpd.conf ] || sudo wget -O ${DIRNAME}/zebra.conf https://raw.githubusercontent.com/dserfez/tox-lab-net/master/${DIR}_conf/zebra.conf
#      done
#
#      # Helper for starting router containers
#      start_container() {
#        docker run --cap-add=NET_ADMIN --net=none $FEATURE \
#          --name $CONTAINER -e "HOSTNAME=$CONTAINER" \
#          -v "/opt/lab/$CONTAINER"_conf/:/etc/quagga/ \
#           cycomf/docker-labrouter
#      }
#
#      # Create internal networks
#      for BRIDGE in $BRIDGES ; do
#        IS_IT_THERE=$(brctl show | grep ^$BRIDGE | awk '{print $1}'  )
#        if [[ $BRIDGE != $IS_IT_THERE ]] ; then
#          sudo brctl addbr $BRIDGE
#        fi
#      done
#
#      # Start router containmers
#      for CONTAINER in $ROUTER_NAMES ; do
#        docker kill $CONTAINER
#        docker rm $CONTAINER
#        start_container
#      done
#
#      # ISP peering router network interfaces
#      $pipework p-isp -i eth0 -l isp_p isp_peering 0.0.0.0/0
#      $pipework $PUBLIC_IFACE -i eth1 -l isp_out isp_peering $PUBLIC_IP
#
#      # DC_PE router network interfaces
#      $pipework p-dcpe -i eth0 -l dc_p dc_pe 0.0.0.0/0
#      $pipework $TOXIA_IFACE -i eth1 -l dc_out dc_pe $TOXIA_IP
#
#      # SUBS_PE router network interfaces
#      $pipework p-subspe -i eth0 -l subs_p subs_pe 0.0.0.0/0
#      $pipework $SUBS_IFACE -i eth1 -l subs_out subs_pe $SUBS_IP
#
#      # P router network interfaces
#      $pipework p-isp -i eth0 -l p_isp pr 0.0.0.0/0
#      $pipework p-dcpe -i eth1 -l p_dc pr 0.0.0.0/0
#      $pipework p-subspe -i eth2 -l p_subs pr 0.0.0.0/0
#
#  - path: /usr/local/bin/con
#    permissions: "0755"
#    owner: root
#    content: |
#      #!/bin/bash
#
#      CONTAINER_NAMES=$(docker ps --format "{{.Names}}")
#
#      declare -A CONTAINERS
#
#      for CONTAINER_NAME in ${CONTAINER_NAMES} ; do
#        CONTAINERS[$CONTAINER_NAME]=$( docker inspect -f "{{.Config.Hostname}}" $CONTAINER_NAME)
#      done
#
#      select_container() {
#        echo "Select Container"
#        PS3="Enter container number from the left: "
#        select C in "${!CONTAINERS[@]}"
#        do
#          echo "Entering container: $C"
#          echo "Access router console inside container by executing: 'vtysh'"
#          docker exec -ti $C /bin/sh
#          break
#        done
#      }
#
#      select_container
#
#  - path: /usr/local/bin/pack_lab.sh
#    permissions: "0755"
#    owner: root
#    content: |
#      #!/bin/bash
#      #TIMESTAMP=$(date +"%Y-%m-%d_%s")
#      TIMESTAMP=$(date +"%s")
#      tar czvf lab_${TIMESTAMP}.tar.gz /opt/lab /usr/local/bin
#
